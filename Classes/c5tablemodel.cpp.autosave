#include "c5tablemodel.h"

C5TableModel::C5TableModel(C5Database &db, QObject *parent) :
    QAbstractTableModel(parent),
    fDb(db)
{

}

void C5TableModel::translate(const QMap<QString, QString> &t)
{
    fTranslateColumn = t;
}

void C5TableModel::execQuery(const QString &query)
{
    beginResetModel();
    clearModel();
    fDb.exec(query, fRawData, fColumnNameIndex);
    for (int i = 0, count = fRawData.count(); i < count; i++) {
        fProxyData << i;
    }
    for (QMap<QString, int>::const_iterator it = fColumnNameIndex.begin(); it != fColumnNameIndex.end(); it++) {
        fColumnIndexName[it.value()] = it.key();
    }
    endResetModel();
}

int C5TableModel::rowCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent);
    return fProxyData.count();
}

int C5TableModel::columnCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent);
    return fColumnNameIndex.count();
}

QVariant C5TableModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (role == Qt::DisplayRole) {
        if (orientation == Qt::Vertical) {
            return section + 1;
        } else {
            return fTranslateColumn.contains(fColumnIndexName[section]) ? fTranslateColumn[fColumnIndexName[section]] : fColumnIndexName[section];
        }
    }
    return QVariant();
}

QVariant C5TableModel::data(const QModelIndex &index, int role) const
{
    if (!index.isValid()) {
        return QVariant();
    }
    switch (role) {
    case Qt::DisplayRole:
        return dataDisplay(index.row(), index.column());
    case Qt::BackgroundColorRole:
        if (fColorData.contains(fProxyData.at(index.row()))) {
            return fColorData[fProxyData.at(index.row())][index.column()];
        }
        return QVariant(QColor(Qt::white));
    default:
        return QVariant();
    }
}

bool C5TableModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    switch (role) {
    case Qt::EditRole:
        fRawData[fProxyData.at(index.row())][index.column()] = value;
        break;
    }
    return true;
}

void C5TableModel::setRowToUpdate(int row, const QString &field, const QVariant &value, const QColor &rowColor)
{
    fRowToUpdate << fProxyData.at(row);
    if (field.length() > 0) {
        fAddDataToUpdate[fProxyData.at(row)][field] = value;
    }
    setRowColor(row, rowColor);
}

void C5TableModel::setRowColor(int row, const QColor &color)
{
    if (fColorData.contains(fProxyData.at(row))) {
        for (int i = 0; i < fColumnIndexName.count(); i++) {
            fColorData[fProxyData.at(row)][i] = color;
        }
    } else {
        QList<QColor> colors;
        for (int i = 0; i < fColumnIndexName.count(); i++) {
            colors << color;
        }
        fColorData[fProxyData.at(row)] = colors;
    }
}

Qt::ItemFlags C5TableModel::flags(const QModelIndex &index) const
{
    if (fEditableFlags.contains(index.column())) {
        return QAbstractTableModel::flags(index) ^ fEditableFlags[index.column()];
    } else {
        return QAbstractTableModel::flags(index);
    }
}

void C5TableModel::setEditableFlag(int column, Qt::ItemFlags flag)
{
    fEditableFlags[column] = flag;
}

void C5TableModel::insertRow(int row)
{
    beginInsertRows(QModelIndex(), row + 1, row + 1);
    QList<QVariant> emptyRow;
    for (int i = 0; i < fColumnIndexName.count(); i++) {
        emptyRow << QVariant();
    }
    fRawData.insert(row + 1, emptyRow);
    fProxyData.clear();
    for (int i = 0, count = fRawData.count(); i < count; i++) {
        fProxyData << i;
    }
    endInsertRows();
}

void C5TableModel::saveDataChanges()
{
    for (int i = 0, count = fRowToUpdate.count(); i < count; i++) {
        int row = fRowToUpdate.toList().at(i);
        if (fRawData.at(row).at(0).toString() == 0) {
            fDb[":f_id"] = 0;
            fRawData[row][0] = fDb.insert(fTableForUpdate, true);;
        }
        for (int j = 0; j < fColumnsForUpdate.count(); j++) {
            fDb[":" + fColumnIndexName[fColumnsForUpdate.at(j)]] = fRawData.at(row).at(fColumnsForUpdate.at(j));
        }
        if (fAddDataToUpdate.contains(row)) {
            for (QMap<QString, QVariant>::const_iterator it = fAddDataToUpdate[row].begin(); it != fAddDataToUpdate[row].end(); it++) {
                fDb[":" + it.key()] = it.value();
            }
        }
        fDb.update(fTableForUpdate, where_id(fRawData.at(row).at(0).toInt()));
    }
    fRowToUpdate.clear();
    fAddDataToUpdate.clear();
    fColorData.clear();
}

void C5TableModel::clearModel()
{
    fRawData.clear();
    fColumnNameIndex.clear();
    fColumnIndexName.clear();
    fRowToUpdate.clear();
    fAddDataToUpdate.clear();
}
